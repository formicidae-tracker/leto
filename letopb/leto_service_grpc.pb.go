// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: letopb/leto_service.proto

package letopb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LetoClient is the client API for Leto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LetoClient interface {
	StartTracking(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*Empty, error)
	StopTracking(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	GetStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Status, error)
	GetLastExperimentLog(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ExperimentLog, error)
	Link(ctx context.Context, in *TrackingLink, opts ...grpc.CallOption) (*Empty, error)
	Unlink(ctx context.Context, in *TrackingLink, opts ...grpc.CallOption) (*Empty, error)
}

type letoClient struct {
	cc grpc.ClientConnInterface
}

func NewLetoClient(cc grpc.ClientConnInterface) LetoClient {
	return &letoClient{cc}
}

func (c *letoClient) StartTracking(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/fort.leto.proto.Leto/StartTracking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *letoClient) StopTracking(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/fort.leto.proto.Leto/StopTracking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *letoClient) GetStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/fort.leto.proto.Leto/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *letoClient) GetLastExperimentLog(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ExperimentLog, error) {
	out := new(ExperimentLog)
	err := c.cc.Invoke(ctx, "/fort.leto.proto.Leto/GetLastExperimentLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *letoClient) Link(ctx context.Context, in *TrackingLink, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/fort.leto.proto.Leto/Link", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *letoClient) Unlink(ctx context.Context, in *TrackingLink, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/fort.leto.proto.Leto/Unlink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LetoServer is the server API for Leto service.
// All implementations must embed UnimplementedLetoServer
// for forward compatibility
type LetoServer interface {
	StartTracking(context.Context, *StartRequest) (*Empty, error)
	StopTracking(context.Context, *Empty) (*Empty, error)
	GetStatus(context.Context, *Empty) (*Status, error)
	GetLastExperimentLog(context.Context, *Empty) (*ExperimentLog, error)
	Link(context.Context, *TrackingLink) (*Empty, error)
	Unlink(context.Context, *TrackingLink) (*Empty, error)
	mustEmbedUnimplementedLetoServer()
}

// UnimplementedLetoServer must be embedded to have forward compatible implementations.
type UnimplementedLetoServer struct {
}

func (UnimplementedLetoServer) StartTracking(context.Context, *StartRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTracking not implemented")
}
func (UnimplementedLetoServer) StopTracking(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopTracking not implemented")
}
func (UnimplementedLetoServer) GetStatus(context.Context, *Empty) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedLetoServer) GetLastExperimentLog(context.Context, *Empty) (*ExperimentLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastExperimentLog not implemented")
}
func (UnimplementedLetoServer) Link(context.Context, *TrackingLink) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Link not implemented")
}
func (UnimplementedLetoServer) Unlink(context.Context, *TrackingLink) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unlink not implemented")
}
func (UnimplementedLetoServer) mustEmbedUnimplementedLetoServer() {}

// UnsafeLetoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LetoServer will
// result in compilation errors.
type UnsafeLetoServer interface {
	mustEmbedUnimplementedLetoServer()
}

func RegisterLetoServer(s grpc.ServiceRegistrar, srv LetoServer) {
	s.RegisterService(&Leto_ServiceDesc, srv)
}

func _Leto_StartTracking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LetoServer).StartTracking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fort.leto.proto.Leto/StartTracking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LetoServer).StartTracking(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Leto_StopTracking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LetoServer).StopTracking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fort.leto.proto.Leto/StopTracking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LetoServer).StopTracking(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Leto_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LetoServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fort.leto.proto.Leto/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LetoServer).GetStatus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Leto_GetLastExperimentLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LetoServer).GetLastExperimentLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fort.leto.proto.Leto/GetLastExperimentLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LetoServer).GetLastExperimentLog(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Leto_Link_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackingLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LetoServer).Link(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fort.leto.proto.Leto/Link",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LetoServer).Link(ctx, req.(*TrackingLink))
	}
	return interceptor(ctx, in, info, handler)
}

func _Leto_Unlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackingLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LetoServer).Unlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fort.leto.proto.Leto/Unlink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LetoServer).Unlink(ctx, req.(*TrackingLink))
	}
	return interceptor(ctx, in, info, handler)
}

// Leto_ServiceDesc is the grpc.ServiceDesc for Leto service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Leto_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fort.leto.proto.Leto",
	HandlerType: (*LetoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartTracking",
			Handler:    _Leto_StartTracking_Handler,
		},
		{
			MethodName: "StopTracking",
			Handler:    _Leto_StopTracking_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _Leto_GetStatus_Handler,
		},
		{
			MethodName: "GetLastExperimentLog",
			Handler:    _Leto_GetLastExperimentLog_Handler,
		},
		{
			MethodName: "Link",
			Handler:    _Leto_Link_Handler,
		},
		{
			MethodName: "Unlink",
			Handler:    _Leto_Unlink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "letopb/leto_service.proto",
}
