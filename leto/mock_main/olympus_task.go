// Code generated by MockGen. DO NOT EDIT.
// Source: olympus_task.go

// Package mock_main is a generated GoMock package.
package mock_main

import (
	reflect "reflect"

	api "github.com/formicidae-tracker/olympus/api"
	gomock "github.com/golang/mock/gomock"
)

// MockOlympusTask is a mock of OlympusTask interface.
type MockOlympusTask struct {
	ctrl     *gomock.Controller
	recorder *MockOlympusTaskMockRecorder
}

// MockOlympusTaskMockRecorder is the mock recorder for MockOlympusTask.
type MockOlympusTaskMockRecorder struct {
	mock *MockOlympusTask
}

// NewMockOlympusTask creates a new mock instance.
func NewMockOlympusTask(ctrl *gomock.Controller) *MockOlympusTask {
	mock := &MockOlympusTask{ctrl: ctrl}
	mock.recorder = &MockOlympusTaskMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOlympusTask) EXPECT() *MockOlympusTaskMockRecorder {
	return m.recorder
}

// PushDiskStatus mocks base method.
func (m *MockOlympusTask) PushDiskStatus(arg0 *api.DiskStatus, arg1 *api.AlarmUpdate) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PushDiskStatus", arg0, arg1)
}

// PushDiskStatus indicates an expected call of PushDiskStatus.
func (mr *MockOlympusTaskMockRecorder) PushDiskStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushDiskStatus", reflect.TypeOf((*MockOlympusTask)(nil).PushDiskStatus), arg0, arg1)
}

// Run mocks base method.
func (m *MockOlympusTask) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockOlympusTaskMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockOlympusTask)(nil).Run))
}
